{"version":3,"sources":["actions/index.js","note.js","notes.js","reducers/index.js","store/index.js","index.js"],"names":["noteTextChange","index","text","type","changeTags","tags","library","add","fab","faTimesCircle","Note","props","handleChange","event","result","target","value","match","forEach","newTag","newTagTrimmed","slice","includes","dispatch","concat","handleTagsChange","changed","item","newNote","note","regEx","RegExp","replace","handleDelete","onFocusOn","setState","focus","onFocusOff","state","this","searchTags","length","i","ifInSearch","className","onBlur","onChange","onFocus","highlightClassName","searchWords","autoEscape","textToHighlight","tabIndex","inputProps","placeholder","bind","onClick","style","icon","React","Component","Notes","newNoteSend","scrollToTop","notesRef","current","scrollTo","top","behavior","createRef","name","title","ref","notes","map","data","id","connect","rootReducer","combineReducers","action","newState","JSON","parse","stringify","push","shortid","generate","splice","persistConfig","key","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","App","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c396082.chunk.js","sourcesContent":["\r\nexport const newNote = () => {\r\n    return { type: 'NEWNOTE' }\r\n}\r\nexport const noteTextChange = (index, text) => {\r\n    return {\r\n        type: 'NOTETEXTCHANGE',\r\n        index: index,\r\n        text: text,\r\n    }\r\n}\r\nexport const deleteNote = (index) => {\r\n    return {\r\n        type: 'DELETENOTE',\r\n        index: index,\r\n    }\r\n}\r\nexport const changeTags = (index, tags) => {\r\n    return {\r\n        type: 'CHANGETAGS',\r\n        index: index,\r\n        tags: tags,\r\n    }\r\n}","import React from 'react';\r\nimport './notes.scss';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport TagsInput from 'react-tagsinput'\r\nimport Highlighter from \"react-highlight-words\"\r\nimport { noteTextChange, deleteNote, changeTags } from './actions';\r\n\r\nlibrary.add(fab, faTimesCircle)\r\n\r\nclass Note extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            focus: false,\r\n        }\r\n    }\r\n    handleChange = event => {\r\n        let result = event.target.value;\r\n        if (result.match(/#[\\w\\d]+\\W/g) !== null) {\r\n            let newTags = result.match(/#[\\w\\d]+\\W/g);\r\n            newTags.forEach(newTag => {\r\n                let newTagTrimmed = newTag.slice(0, -1).slice(1);\r\n                if (this.props.tags.includes(newTagTrimmed) === false) {\r\n                    this.props.dispatch(changeTags(this.props.index, this.props.tags.concat(newTagTrimmed)));\r\n                }\r\n            })\r\n        }\r\n        this.props.dispatch(noteTextChange(this.props.index, result));\r\n    }\r\n    handleTagsChange = (tags, changed) => {\r\n        changed.forEach(item => {\r\n            if (!tags.includes(item)) {\r\n                let newNote = this.props.note;\r\n                let regEx = new RegExp(`#${item}`, 'gi');\r\n                while (newNote.match(regEx) !== null) {\r\n                    newNote = newNote.replace(regEx, `${item}`);\r\n                }\r\n                this.props.dispatch(noteTextChange(this.props.index, newNote));\r\n            }\r\n        })\r\n        this.props.dispatch(changeTags(this.props.index, tags));\r\n\r\n    }\r\n    handleDelete = event => {\r\n        this.props.dispatch(deleteNote(this.props.index));\r\n    }\r\n    ifInSearch() {\r\n        if (this.props.searchTags.length === 0) {\r\n            return true;\r\n        }\r\n        for (let i = 0; i < this.props.searchTags.length; i++) {\r\n            if (!this.props.tags.includes(this.props.searchTags[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    onFocusOn = () => {\r\n        this.setState({\r\n            focus: true\r\n        })\r\n    }\r\n    onFocusOff = () => {\r\n        this.setState({\r\n            focus: false\r\n        })\r\n    }\r\n    render() {\r\n        if (this.ifInSearch()) {\r\n            return (\r\n                <div className=\"note-node\" onBlur={this.onFocusOff}>\r\n                    {this.state.focus === true ?\r\n                        (<textarea className=\"note-node__textarea\" value={this.props.note} onChange={this.handleChange} >\r\n                        </textarea>)\r\n                        : (<Highlighter\r\n                            onFocus={this.onFocusOn}\r\n                            className=\"HighLight\"\r\n                            highlightClassName=\"YourHighlightClass\"\r\n                            searchWords={this.props.tags}\r\n                            autoEscape={true}\r\n                            textToHighlight={this.props.note}\r\n                            tabIndex='1'\r\n                        />)}\r\n                    <TagsInput className=\"tags-filter\" value={this.props.tags} inputProps={{\r\n                        className: 'react-tagsinput-input',\r\n                        placeholder: ''\r\n                    }} onChange={this.handleTagsChange.bind(this)}></TagsInput>\r\n                    <button className=\"note-note__delete\" onClick={this.handleDelete}>\r\n                        <FontAwesomeIcon style={{ 'fontSize': '1rem' }} icon=\"times-circle\" />\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else { return null }\r\n    }\r\n}\r\n\r\n\r\nexport default Note;","import React from 'react';\r\nimport './notes.scss';\r\nimport { connect } from 'react-redux';\r\nimport TagsInput from 'react-tagsinput'\r\nimport { newNote } from './actions';\r\nimport Note from './note'\r\n\r\nconst mapStateToProps = state => {\r\n  if (state.notes === false) {\r\n    return { notes: [] };\r\n  }\r\n  return {\r\n    notes: state.notes,\r\n    \r\n  };\r\n}\r\n\r\nclass Notes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tags: [],\r\n    }\r\n    this.notesRef = React.createRef();\r\n\r\n  };\r\n  newNoteSend = () => {\r\n    this.props.dispatch(newNote());\r\n    this.scrollToTop();\r\n  }\r\n  scrollToTop = () => {\r\n    this.notesRef.current.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth'\r\n    })\r\n  }\r\n  handleTagsChange(tags) {\r\n    this.setState({ tags })\r\n  }\r\n  render() {\r\n    return (\r\n      <main className=\"notes-window\">\r\n        <TagsInput className=\"tags-filter\" value={this.state.tags} inputProps={{\r\n          className: 'react-tagsinput-input search-tags',\r\n          placeholder: 'search tags...'\r\n        }} onChange={this.handleTagsChange.bind(this)}></TagsInput>\r\n        <div className=\"notes-toolbar\">\r\n          <button name=\"newTag\" type=\"button\" className=\"notes-toolbar__button\" title=\"new note\" onClick={this.newNoteSend}> New Tag\r\n          </button>\r\n        </div>\r\n        <div className=\"notes-wrapper\" ref={this.notesRef}>\r\n          <ul className=\"notes-container\">\r\n            {\r\n              this.props.notes.notes.map((data, index) => (\r\n                <Note key={data.id} index={index} note={data.note}  tags={data.tags} searchTags={this.state.tags} dispatch={this.props.dispatch}></Note>\r\n              ))\r\n            }\r\n          </ul>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Notes);\r\n","import shortid from 'shortid';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst notesReducer = (state = { notes: [] }, action) => {\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n    switch (action.type) {\r\n        case 'NEWNOTE':\r\n            newState.notes.push({ id: shortid.generate(), note: '', tags: [] })\r\n            return newState;\r\n        case 'NOTETEXTCHANGE':\r\n            newState.notes[action.index].note = action.text;\r\n            return newState;\r\n        case 'DELETENOTE':\r\n            newState.notes.splice(action.index, 1);\r\n            return newState;\r\n        case 'CHANGETAGS':\r\n            newState.notes[action.index].tags = action.tags;\r\n            return newState;\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst rootReducer = combineReducers({\r\n    notes: notesReducer,\r\n})\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport storage from 'redux-persist/lib/storage'\r\nimport rootReducer from '../reducers';\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2 ,\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport const store = createStore(persistedReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nexport let persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Notes from './notes';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { store, persistor } from './store/index'\r\nimport { Provider } from 'react-redux';\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n            <Notes/>\r\n        </PersistGate>\r\n    </Provider>\r\n)\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}